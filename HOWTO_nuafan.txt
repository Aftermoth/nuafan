Nuafan adapts nodes from other mods to add nua functionality.

Using nuafan is all about telling it which nodes to adapt from other mods, and what changes to make.

This is acheived using filter files, which are essentially just lists.


--------------------------
Contents:
	Filter files
		Mod filtering
		Node filtering
	Basic syntax
	
	Optional
		Globbing syntax
		Precedence
		Exclusion patterns
	
	Editing tips
	
	Footnote
--------------------------




====== Filter files ======

The README.md for nua outlines the code that nuafan produces.



** Mod Filtering **

"depends.txt" is the main filter, consisting of one mod name per line.
	"nua" is nuafan's only real dependency, and must not be removed.
	Otherwise, all and only those mods to be adapted should be listed.
With no other filters, nuafan will add event signalling to all nodes from those mods.

Optional dependencies ("name?") will be used if loaded, and are recommended so you don't have to edit it when you disable mods.
Nuafan will not adapt any nodes from mods not listed here.



** Node Filtering **

The remaining filters all deal with individual node types.
They may include unused node specifications without problems, so there's no need to edit it every time you change mods.

"f_xconstruct.txt", "f_xdestruct.txt"
	These prevent listed nodes from signalling an event on construction or destruction, respectively.
	By default they contain "@safemode:" which is a directive that avoids editing any callbacks that have already been defined. This is because nuafan cannot yet cooperate with existing definitions without hurting their original functionality.
	No editing is required unless you wish to exclude additional nodes, or disable safemode and do everything manually.
	Manual entries in "f_xconstruct.txt" can have "X" as a second field to also block definitions in "f_callbacks."

"f_callbacks.txt"
	This defines callbacks for nodes, allowing them to respond to alerts as well as cause them. It has the same syntax as the other "f_" files, plus an additional function name on each line. Function names given here shall be called with two arguments, (receiverpos,eventpos) to receive update alerts.
	Mods that supply only functions need not be in "depends.txt," as long as those you need are loaded by the game. In fact, if the mod has a nua-compatible callback function, its nodes are probably already nua aware anyway.



====== Basic syntax ======

All filters have one entry per line; a node descriptor, and in "callbacks" a function name.
Different parts of an entry are separated by space(s), and no spaces are allowed within each part.
Space or tab indented lines are comments, and ignored by nuafan.

 -----------------------------------

default:cobble   mymod.monsterize

 -----------------------------------

Duplicate node descriptors replace earlier entries. In "callbacks," this redefines the function, or removes it if none is given.

Everything can be done explicitly with the basic syntax above. The following simply reduces the file size a bit.




====== Optional ======

Nuafan does not, and will not, support general regular expressions, but some conveniences may prove indispensable with larger variety of nodes.



Note: Safemode can be enabled selectively, but it's very unlikely you won't want it on all mods.

@safemode:				applies to all mods
@safemode:mod1,mod2		applies only to named mods

Because safemode handles essential filtering automatically, and you would likely want update events to work for as many nodes as possible, usually only "f_callbacks" would be worth editing.



** Globbing syntax **

Multiple node names can be referenced on one line:

m:a,b,c				expands to separate entries m:a m:b m:c (INclusion)
m:-a,b,c			all names from m except m:a m:b m:c (EXclusion)
m:					all names from m
*					all names from all mods


Related specifiers can also be referenced within a single specifier pattern:
The "*" can only occur once, at one end, where a "_" might be

a_b*, a*, *a_b, *b		all match a_b

for example:

"stone*" matches:
	stone
	stone_with_iron
but not:
	stonebrick


REMEMBER: Each line shares any additional fields, such as the "X" in f_xconstruct, or function name in f_callbacks.

default:-*flowing,furnace*,wood   oddmod.allbut_flowoodfurn



** Precedence **

1) Test classes are ordered from most to least restrictive.
		m:a > m:-a > m: > *

2) Inclusion tests prioritise by first '*'-pattern to match, under the ordering:
		plain; on the right, leftwards; on the left, rightwards.
e.g.  a_b_c > a_b_c* > a_b* > a* > *a_b_c > *b_c > *c

3) Exclusion tests prioritise by entry order.

4) If duplicate node identifiers occur later in the list, they will replace any definitions of the earlier entry, but in the list position of the original. With the exception of "X," which is protected against overwriting.
Comparison occurs after
- inclusion lists are expanded to separate entries
- exclusion lists are put in canonical form, e.g.
		m:-b,a = m:-b,a,b = m:-a,b,a = m:-a,a,b --> m:-a,b
Note that '*' is treated literally, without interpretation.

Tip: Use precedence to make exceptions, e.g.

*	mymod.everyone_does_it
yourmod:exception
	wins the match and returns no function.




** Exclusion patterns ** (extra)

Precedence ensures that they only apply to the leftovers, after inclusion patterns take what they want.

Patterns with more EXclusions and therefore fewer INclusions should have higher priority.
Usually, you should list wider exclusion patterns earlier, so their inclusions are not blocked.

e.g.

m:-a    n.f		<-- m:b and m:the_rest
m:-a,b  n.g		useless

but,

m:-a,b  n.g		<-- m:the_rest
m:-a    n.f		<-- m:b

but also,

m:-a,b  n.g		gets redefined in place
m:-a    n.f		<-- m:b
m:-b,a  n.h		<-- m:the_rest




====== Editing tips ======

Make your filter files easy to read and understand so you know what to expect.

Group entries by mod.
Use blank lines if it helps.
Remember, if you need them, comments are on separate lines. 
It's usually easier and clearer when temporarily disabling entries to indent them in place rather than move or remove them.

When using globs:
List entries from high to low precedence.
"mod: " finishes a mod group, "* " finishes the list, if used.

